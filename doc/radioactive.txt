*radioactive.txt*  Reactive components using neovim and treesitter.

==============================================================================
CONTENTS                                                *radioactive-contents*

    1. Introduction ......................... |radioactive-introduction|
    2. Setup ....................................... |radioactive-setup|
    3. Core logic and constraints ................... |radioactive-core|
    4. UI constraints ................................. |radioactive-ui|
    5. Widget constraints ......................... |radioactive-widget|
    6. App constraints ............................... |radioactive-app|
    7. API ........................................... |radioactive-api|

==============================================================================
1. INTRODUCTION                                     *radioactive-introduction*

*radioactive* uses Neovim to create reactive uis.

The motivation is:
  - Neovim is cross-platform
  - consistent 'native ui'
  - already looks good out of the box
  - easy access to features, themes through plugins
  - now supports `NVIM_APPNAME`, allowing for standalone apps
  - startup is blazing fast ðŸ”¥
  - easy way to share custom widgets, simply using `lazy.vim`
  - app elements like div, navbar, tabs, toasts, etc. already available
  - package management is automatic with `lazy.vim`
  - already has searchable DOM using treesitter
    - so technically, possible to render HTML to a 'Neovim GUI'

The main challenges are:
  - Adoption of î˜  `lua` ( e.g. libs for json, yaml, sql, etc. )
  - Implementation of DOM using treesitter maybe in shadow buffer
  - Layout engine, supporting resize
  - State management, obviously
  - Style using highlights
  - async
  - loop to check dirty instead?

The goal is to emulate `browser + html + javascript` with `neovim + html? + lua`
for terminal apps.

==============================================================================
2. SETUP                                                   *radioactive-setup*

The goal is to build standalone apps, so our code structure is same as neovim
config file structures, and uses your `init` file. Clone the repo to some
folder in `$XDG_CONFIG_HOME/radioactive`. The `radioactive` is used as env variables
to make our app standalone.

The directory structure now looks like this: >

    ï„• $XDG_CONFIG_HOME/radioactive
    â”œâ”€â”€ ï’Š README.md
    â”œâ”€â”€ î˜  init.lua
    â”œâ”€â”€ ï„• lua
    â”‚  â”œâ”€â”€ ï„• examples
    â”‚  â”‚  â”œâ”€â”€ î˜  app_shell.lua
    â”‚  â”‚  â””â”€â”€ î˜  counter.lua
    â”‚  â””â”€â”€ ï„• radioactive
    â”‚     â”œâ”€â”€ î˜  bootstrap.lua
    â”‚     â”œâ”€â”€ î˜  ui.lua
    â”‚     â”œâ”€â”€ î˜  keys.lua
    â”‚     â”œâ”€â”€ î˜  au.lua
    â”‚     â”œâ”€â”€ î˜  layout.lua
    â”‚     â””â”€â”€ ï„• widgets
    â”œâ”€â”€ ï„• doc
    â”‚  â””â”€â”€ ï…œ radioactive.txt
    â””â”€â”€ ï„• tests


The simplest example of an app looks like this, where the widget
`state` stores `count`, initialized with `data` ( props? ): >

    -- importing components
    local button = require("radioactive.widgets.button")

    -- setting up components with props ( use keys, au for listeners )
    local buttons = button.setup({ id = "buttons", data = { count = 0 }, })

    -- 'DOM' using children, id
    return {
      id = "counter",
      class = "counter",
      children = { buttons },
      state = { count = 0 },
    }


To switch between several apps, ( maybe debug version, etc. ), set the
name in `init.lua`.

In `init.lua`: >

    -- bootstrap lazy.nvim
    require("radioactive.bootstrap")

    -- start app
    local ui = require("radioactive.ui")
    ui.setup({ app = "examples.counter" })
    ui.init()

To start the app, just run nvim after setting appropriate appname.

From `bash`: >

    export NVIM_APPNAME=radioactive
    nvim

From `fish`: >

    set -x NVIM_APPNAME=radioactive
    nvim

The above example ( the usual counter ) looks like this: >

    local button = require("radioactive.widgets.button")

    local buttons_id = "buttons"
    local buttons = button.setup({
      id = buttons_id,
      data = { count = 0 },
      rect = { col = 0.1, row = 0.3, width = 0.8, height = 0.4, zindex = 500 },
      style = { align_vertical = "center", align_horizontal = "center" },
      format_lines = function(self)
      self.state.text = {
        "î‚¶â–ˆ   j ï•ž  ðŸ˜¸  ï•† k   â–ˆî‚´",
        "",
        string.format("%3s", self.data.count),
        "",
        "î‚¶" .. string.rep("â–ˆâ–ˆ", math.abs(math.ceil(self.data.count))) .. "î‚´",
      }
      end,
      keys = {
        increment = {
          "n",
          "j",
          function(components)
            local c = components.buttons
            c.data.count = math.min(10, c.data.count + 1)
          end,
          { buttons_id },
        },
        decrement = {
          "n",
          "k",
          function(components)
            local c = components.buttons
            c.data.count = math.max(-10, c.data.count - 1)
          end,
          { buttons_id },
        },
      },
    })

    return {
      id = "counter",
      class = "counter",
      children = { buttons },
      state = { count = 0 },
    }



==============================================================================
3. Core logic and constraints                                *radioactive-core*

==============================================================================
4. Widget constraints                                      *radioactive-widget*

==============================================================================
5. App constraints                                            *radioactive-app*

==============================================================================
6. API                                                        *radioactive-api*


radioactive.setup({config})                              *radioactive.setup()*
        Configures this plugin. Currently supported configuration variables
        are:
        â€¢ `opts`: Table of options.

        Parameters: ~
            {config}(required, table) Table of values; keys are as listed
                above. Accept defaults by omitting the relevant key.

radioactive.ui.start()                                *radioactive.ui.start()*
        Start ui.
        Return: ~
            true/false

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
